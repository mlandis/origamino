/*
 * ModelSeq.cpp
 *
 *  Created on: Jan 24, 2010
 *      Author: mikee
 */

#include "ModelSeq.h"

#define ZERO_ENTRY		0
#define SYN_TI_ENTRY	1
#define SYN_TV_ENTRY	2
#define NONSYN_TI_ENTRY	3
#define NONSYN_TV_ENTRY	4

#define RESCALE_LIKES

ModelSeq::ModelSeq(Alignment *ap, MbRandom *rp, Settings* sp, Tree* tp) {

	std::cout << "INITIALIZING MODEL: SEQUENCE-STRUCTURE FIT\n\n";

	// keep track of pointers to important objects
	alignmentPtr	= ap;
	ranPtr			= rp;
	treePtr			= tp;
	numCodonSites	= alignmentPtr->getNumCodonSites();
	numSampleSeqs	= 100;
	brlenLambda		= sp->getBrlenLambda();

	// allocate a vector holding the stationary probabilities
	stationaryProbs = new double[numCodonSites];

	// add the parameters to the phylogenetic model
	parameters.push_back(treePtr);
	parameters.push_back(new CodonFrequencies(ranPtr, "Codon Frequencies", treePtr, alignmentPtr));
	parameters.push_back(new Kappa(ranPtr, treePtr, "Kappa"));
	parameters.push_back(new Omega(ranPtr, treePtr, "Omega"));
	parameters.push_back(new ScalerU(ranPtr, treePtr, brlenLambda, "SubstRate"));
	parameters.push_back(new SeqStructS( ranPtr, treePtr, "SeqStructS"));
	parameters.push_back(new SeqStructP( ranPtr, treePtr, "SeqStructP"));

	// initialize parametersGibbs
	parametersGibbs = parameters;

	std::cout << "\n";

	// initialize the proposal probabilities
	proposalProbs.push_back( 0.0 ); // probability of proposing a change to the tree
	proposalProbs.push_back( 1.0 ); // probability of proposing a change to the codon frequencies
	proposalProbs.push_back( 1.0 ); // probability of proposing a change to the transition/transversion rate ratio
	proposalProbs.push_back( 1.0 ); // probability of proposing a change to the dN/dS rate ratio
	proposalProbs.push_back( 5.0 ); // probability of proposing a change to the scaling parameters
	proposalProbs.push_back( 1.0 ); // probability of proposing a change to the solvent accessibility
	proposalProbs.push_back( 1.0 ); // probability of proposing a change to the pairwise structure (contact map?)

	double sum = 0.0;
	for (int i = 0; i < (int)proposalProbs.size(); i++)
		sum += proposalProbs[i];
	for (int i = 0; i < (int)proposalProbs.size(); i++)
		proposalProbs[i] /= sum;

	// set up the qTemplate rate matrix (which runs fillInRateMatrix() in the process
	initializeRateMatrix(alignmentPtr->getNumSenseCodons());

	// instantiate the conditional likelihoods
	condLikes = new CondLikes(alignmentPtr);

	// instantiate the transition probabilities

	////tiMatrix = new MbTransitionMatrix(q, false);
	////tiProbs = new TiProbs( 2 * alignmentPtr->getNumTaxa() - 2, tiMatrix, treePtr);

#	if defined(RESCALE_LIKES)
	// allocate a vector that holds (temporarily) the log scalers for log likelihood calculations
	lnScalers = new double[numCodonSites];
#	endif

	// print the parameters
	//for (std::vector<Parm*>::iterator p=parameters.begin(); p != parameters.end(); p++)
	//	(*p)->print();
	std::cout << "\n";
}

ModelSeq::~ModelSeq(void) {

	delete condLikes;
	delete tiProbs;
	//delete stochasticTiProbs;
	for (std::vector<Parm*>::iterator p=parameters.begin(); p != parameters.end(); p++)
		delete (*p);
	delete [] stationaryProbs;
#	if defined(RESCALE_LIKES)
	delete [] lnScalers;
#	endif
}

void ModelSeq::initializeRateMatrix(int nc) {

	numSenseCodons		= nc;
	numStates 			= nc;

	q = MbMatrix<double>(numSenseCodons, numSenseCodons);
	for (int i = 0; i < numSenseCodons; i++)
	{
		for (int j = 0; j < numSenseCodons; j++)
		{
			q[i][j] = 0.0;
		}
	}

	// fill in the template
	qTemplate = MbMatrix<int>(numSenseCodons, numSenseCodons);
	for (int i=0; i<numSenseCodons; i++)
		for (int j=0; j<numSenseCodons; j++)
			qTemplate[i][j] = ZERO_ENTRY;

	for (int i=0; i<numSenseCodons; i++)
	{
		int a1 = alignmentPtr->getGeneticCode()->getCodonNuc(i, 0);
		int a2 = alignmentPtr->getGeneticCode()->getCodonNuc(i, 1);
		int a3 = alignmentPtr->getGeneticCode()->getCodonNuc(i, 2);
		int aAa = alignmentPtr->getGeneticCode()->getTransCodon(i);

		for (int j=0; j<numSenseCodons; j++)
		{
			int b1 = alignmentPtr->getGeneticCode()->getCodonNuc(j, 0);
			int b2 = alignmentPtr->getGeneticCode()->getCodonNuc(j, 1);
			int b3 = alignmentPtr->getGeneticCode()->getCodonNuc(j, 2);
			int bAa = alignmentPtr->getGeneticCode()->getTransCodon(j);

			int numChanges = 0;
			if (a1 != b1)
				numChanges++;
			if (a2 != b2)
				numChanges++;
			if (a3 != b3)
				numChanges++;
			if (numChanges == 1)
			{
				bool isSynonymous = true;
				if (aAa != bAa)
					isSynonymous = false;

				bool isTransition = true;
				if ( isTransversion(a1, b1) == true )
					isTransition = false;

				if ( isSynonymous == true && isTransition == true )
					qTemplate[i][j] = SYN_TI_ENTRY;
				else if ( isSynonymous == true && isTransition == false )
					qTemplate[i][j] = SYN_TV_ENTRY;
				else if ( isSynonymous == false && isTransition == true )
					qTemplate[i][j] = NONSYN_TI_ENTRY;
				else if ( isSynonymous == false && isTransition == false )
					qTemplate[i][j] = NONSYN_TV_ENTRY;
			}
		}
	}

	// fill in the rate matrix
	fillInRateMatrix();
	printQ();

}

void ModelSeq::fillInRateMatrix(void) {

	// get the parameters of the model
	std::vector<double> f	= getActiveFreqs()->getFreqs();
	double w				= getActiveDnds()->getDnds();
	double kappa			= getActiveTiTv()->getRate();

	// set diagonal elements of rate matrix to zero
	for (int i = 0; i < numSenseCodons; i++)
		q[i][i] = 0.0;

	// fill in the non-diagonal elements of the matrix, corresponding to substitutions
	double averageRate = 0.0;
	for (int i=0; i<numSenseCodons; i++)
	{
		for (int j=0; j<numSenseCodons; j++)
		{
			if ( qTemplate[i][j] != ZERO_ENTRY )
			{
				if ( qTemplate[i][j] == SYN_TV_ENTRY )
				{
					double val = f[j];
					q[i][j] = val;
					q[i][i] -= val;
					averageRate += f[i] * val;
				}
				else if ( qTemplate[i][j] == SYN_TI_ENTRY )
				{
					double val = f[j] * kappa;
					q[i][j] = val;
					q[i][i] -= val;
					averageRate += f[i] * val;
				}
				else if ( qTemplate[i][j] == NONSYN_TV_ENTRY )
				{
					double val = f[j];
					double x = val * w;
					q[i][j] = x;
					q[i][i] -= x;
					averageRate += f[i] * x;
				}
				else if ( qTemplate[i][j] == NONSYN_TI_ENTRY )
				{
					double val = f[j] * kappa;
					double x = val * w;
					q[i][j] = x;
					q[i][i] -= x;
					averageRate += f[i] * x;
				}
			}
		}
	}

	// calculate R_v,# values (rate away from v)
	double rateSum = 0.0;
	for (int i = 0; i < numSenseCodons; i++) {
		for (int j = 0; j < numSenseCodons; j++) {
			if (i != j) rateSum += q[i][j];
		}
		qRateAway.push_back(rateSum);
		rateSum = 0.0;
	}



}

void ModelSeq::fillInStationaryProbs(void) {

	std::vector<double> f = getActiveFreqs()->getFreqs();
	double p = getActiveDnds()->getDnds();
	double *x = &stationaryProbs[0];
	for (int i=0; i<numSenseCodons; i++)
	{
		(*x) = f[i] * p;
		x++;
	}
}

/*
void ModelSeq::initializeCondLikes(int codonSite) {

	// get a pointer to the current tree topology
	Topology* t = getActiveTopology();

	// update the transition probabilities, if necessary
	tiProbs->setTransitionProbs();
	//stochasticTiProbs->setTransitionProbs();

	// allocate some matrices to temporarily hold the transition matrices
	MbMatrix<double> tiL;
	MbMatrix<double> tiR;
	MbMatrix<double> tiA;

	// calculate the conditional likelihoods down the tree
	for (int n = 0; n < t->getNumNodes(); n++)
	{
		Node* p = t->getDownPassNode(n);
		if (p->getLft() != NULL && p->getRht() != NULL && p->getAnc() != NULL)
		{
#			if defined(RESCALE_LIKES)
			double* clS = condLikes->getClScalerPtr( p->getActiveCl(), p->getIndex(), codonSite );
#			endif
			int lftIdx = p->getLft()->getIndex();
			int rhtIdx = p->getRht()->getIndex();
			tiL = tiProbs->getTiMatrix( p->getLft()->getActiveTi(), lftIdx );
			tiR = tiProbs->getTiMatrix( p->getRht()->getActiveTi(), rhtIdx );
			double* clL = condLikes->getClPtr( p->getLft()->getActiveCl(), lftIdx, codonSite );
			double* clR = condLikes->getClPtr( p->getRht()->getActiveCl(), rhtIdx, codonSite );
			double* clP = condLikes->getClPtr( p->getActiveCl(), p->getIndex(), codonSite );

#			if defined(RESCALE_LIKES)
			double maxCl = 0.0;
#			endif
			for (int i = 0; i < numStates; i++)
			{
				double sumL = 0.0;
				double sumR = 0.0;
				for (int j = 0; j < numStates; j++)
				{
					sumL += tiL[i][j] * clL[j];
					sumR += tiR[i][j] * clR[j];
				}
				clP[i] = sumL * sumR;
#				if defined(RESCALE_LIKES)
				if (clP[i] > maxCl)
					maxCl = clP[i];
#				endif
			}
#			if defined(RESCALE_LIKES)
			double scaler = 1.0 / maxCl;
			for (int i = 0; i < numStates; i++)
				clP[i] *= scaler;
			clS[codonSite] = log(maxCl);
#			endif
		}
	}

	// calculate the conditional likelihoods up the tree
	for (int n = t->getNumNodes() - 1; n >= 0; n--)
	{
		Node* p = t->getDownPassNode(n);
		if (p->getLft() != NULL && p->getRht() != NULL && p->getAnc() != NULL)
		{
			bool pToLeft = true;
			if (p->getAnc()->getLft() != p)
				pToLeft = false;
#			if defined(RESCALE_LIKES)
			double* clSUpL = condLikes->getClScalerPtrUpL( p->getActiveCl(), p->getIndex(), codonSite );
			double* clSUpR = condLikes->getClScalerPtrUpR( p->getActiveCl(), p->getIndex(), codonSite );
#			endif
			int lftIdx = p->getLft()->getIndex();
			int rhtIdx = p->getRht()->getIndex();
			int ancIdx = p->getAnc()->getIndex();
			tiL = tiProbs->getTiMatrix( p->getLft()->getActiveTi(), lftIdx );
			tiR = tiProbs->getTiMatrix( p->getRht()->getActiveTi(), rhtIdx );
			tiA = tiProbs->getTiMatrix( p->getActiveTi(), p->getIndex() );
			double* clL = condLikes->getClPtr( p->getLft()->getActiveCl(), lftIdx, codonSite );
			double* clR = condLikes->getClPtr( p->getRht()->getActiveCl(), rhtIdx, codonSite );
			double* clA;
			if (pToLeft == true)
				clA = condLikes->getClPtrUpR( p->getAnc()->getActiveCl(), ancIdx, codonSite );
			else
				clA = condLikes->getClPtrUpL( p->getAnc()->getActiveCl(), ancIdx, codonSite );
			double* clPUpL = condLikes->getClPtrUpL( p->getActiveCl(), p->getIndex(), codonSite );
			double* clPUpR = condLikes->getClPtrUpR( p->getActiveCl(), p->getIndex(), codonSite );

			// LEFT SIDE
#			if defined(RESCALE_LIKES)
			double maxCl = 0.0;
#			endif

			for (int i = 0; i < numStates; i++)
			{
				double sumL = 0.0;
				double sumA = 0.0;
				for (int j = 0; j < numStates; j++)
				{
					sumL += tiL[i][j] * clL[j];
					sumA += tiA[i][j] * clA[j];

					//std::cout << "tiL[" << i << "][" << j << "] = " << tiL[i][j] << "; " << std::endl;
					//std::cout << "clL[" << j << "] = " << clL[j] << "; " << std::endl;
					//std::cout << "tiA[" << i << "][" << j << "] = " << tiA[i][j] << "; " << std::endl;
					//std::cout << "clA[" << j << "] = " << clA[j] << "; " << std::endl;
					//std::cout << std::endl << std::endl;

				}
				clPUpL[i] = sumL * sumA;

#				if defined(RESCALE_LIKES)
				if (clPUpL[i] > maxCl)
					maxCl = clPUpL[i];
#				endif
			}

#			if defined(RESCALE_LIKES)
			double scaler = 1.0 / maxCl;
			for (int i=0; i<numStates; i++)
				clPUpL[i] *= scaler;
			clSUpL[codonSite] = log(maxCl);
#			endif


			// RIGHT SIDE
#			if defined(RESCALE_LIKES)
			maxCl = 0.0;
#			endif

			for (int i = 0; i < numStates; i++)
			{
				double sumR = 0.0;
				double sumA = 0.0;
				for (int j = 0; j < numStates; j++)
				{
					sumR += tiR[i][j] * clR[j];
					sumA += tiA[i][j] * clA[j];
				}
				clPUpR[i] = sumR * sumA;

#				if defined(RESCALE_LIKES)
				if (clPUpR[i] > maxCl)
					maxCl = clPUpR[i];
#				endif
			}

#			if defined(RESCALE_LIKES)
			scaler = 1.0 / maxCl;
			for (int i=0; i<numStates; i++)
				clPUpR[i] *= scaler;
			clSUpR[codonSite] = log(maxCl);
#			endif

		}
	}
}
*/

bool ModelSeq::isTransversion(int a, int b) {

	if (a == b)
		return false;
	int pA = (int)pow(2.0, (double)a);
	int pB = (int)pow(2.0, (double)b);
	if ( pA + pB == 5 || pA + pB == 10)
		return false;
	return true;
}

double ModelSeq::lnPathLikelihood(void) {

	//
	// this term is equals pr(j,rho|i,theta) * pr(i|theta)
	// 		where
	// 			pr(j,rho|i,theta) 	= [*=:events, R_i(z-1),i(z) * e^(-R_i(z-1),# * (t(z) - t(z-1))] * e^(-R_i(q),# * (t(q+1) - t(q)))
	//		and
	// 			pr(i|theta) 		= e^(-2*s*E_s(i)-2*p*E_p(i) * [*=1:N(pi_i__m)] /
	//		      			          [+=1:k(e^(-2*s*E_s(k)-2*p*E_p(k) * [*=1:N(pi_k__n)]]
	//
	// 		note: the pr(i,j) cancels out in the Metropolis-Hastings ratio
	//
	// pr(D|rho,theta,beta) = pr(s^(root)|theta)*[*=(2N-2, b=1), pr(s^(b->down),rho_b|s^(b->up),beta_b,theta)]
	// 		where: rho = paths, theta = params, beta = topology
	//
	// TODO: LIKELIHOOD = pr(s_root|theta) * pr(s_b_down,rho_b|s_b_up,beta_b,theta)
	//
	// get a pointer to the current tree topology
	Topology* t = getActiveTopology();

	// update the transition probabilities, if necessary
	//// tiProbs->setTransitionProbs();

	double unitBrlen = 0.0;
	double unitTimeMarginOfError = 0.0000000000000005;

	int currState = 0, prevState = 0;
	double unitCurrTime = -1.0, unitPrevTime = 0.0, unitFinalTime = 0.0;
	double lnStepProbSum = 0.0; //, stepProbSum = 1.0;
	double rateAwaySum = 0.0;
	double lnStepProb = 0.0, stepProb = 0.0;
	double x = 0.0;
	std::list<Step> tempList;
	std::list<Step> ancTempList;
	std::vector<int> prevSeq(numCodonSites);
	std::vector<double> u = getActiveSubstRate()->getSubstRate();

	for (int n = 0; n < t->getNumNodes(); n++)
	{
		Node* p = t->getDownPassNode(n);
		if (p->getAnc() != NULL)
		{
			// FIND		pr(j,rho|i,theta) * pr(i|theta)
			// 		where
			// 			pr(j,rho|i,theta) 	= [*=:events, R_i(z-1),i(z) * e^(-R_i(z-1),# * (t(z) - t(z-1))] * e^(-R_i(q),# * (t(q+1) - t(q)))
			//		and
			// 			pr(i|theta) 		= e^(-2*s*E_s(i)-2*p*E_p(i) * [*=1:N(pi_i__m)] /
			//		      			          [+=1:k(e^(-2*s*E_s(k)-2*p*E_p(k) * [*=1:N(pi_k__n)]]


			// pr(j,rho|i,theta) 	= [*=:events, R_i(z-1),i(z) * e^(-R_i(z-1),# * (t(z) - t(z-1))] * e^(-R_i(q),# * (t(q+1) - t(q)))
			// TODO: param u = scale the time from 0 to 1, so t(0) = 0 and t(q+1) = 1

			unitBrlen = u[n];
			unitCurrTime = -1.0;
			unitPrevTime = 0.0;
			unitFinalTime = 0.0;
			//stepProbSum = 1.0;
			rateAwaySum = 0.0;

			tempList = p->getPath()->getEventHistory();
			ancTempList = p->getAnc()->getPath()->getEventHistory();
			reverse(tempList.begin(), tempList.end());
			prevSeq.clear();


			std::cout << "**********************\n";
			std::cout << "**********************\n";
			std::cout << "**********************\n";
			std::cout << "path describing n" << p->getAnc()->getIndex() << "-> n" << p->getIndex() << "   (u[" << n << "]: " << unitBrlen << ")\n";


			int count = 0;
			for (std::list<Step>::iterator it = ancTempList.begin(); it != ancTempList.end() && count < numCodonSites; it++) {
				prevSeq[(*it).getSite()] = (*it).getState();
				count++;
			}

			for (std::list<Step>::iterator it = tempList.begin(); it != tempList.end(); it++)
			{
				unitCurrTime = (*it).getTime() * unitBrlen;
				if (1.0 - unitTimeMarginOfError < unitCurrTime && 1.0 + unitTimeMarginOfError > unitCurrTime) unitCurrTime = 1.0;
				if (unitCurrTime < 1.0 - unitTimeMarginOfError) unitFinalTime = unitCurrTime;

				// if the scaled event time == 1.0, it is a destination event
				if (unitCurrTime == 1.0) {
					//prevSeq[(*it).getSite()] = (*it).getState();
					unitPrevTime = unitCurrTime;
				}

				// otherwise, calculate the probability of the event occuring
				else if (unitPrevTime != unitCurrTime && unitCurrTime != 1.0)
				{
					rateAwaySum = 0.0;
					//stepProb = 1.0;
					lnStepProb = 0.0;

					prevState = prevSeq[(*it).getSite()];
					currState = (*it).getState();

					if (q[prevState][currState] == 0.0) {
						std::cout << "WARNING: q[prevState][currState] == 0.0\n";
					}

					// do not consider virtual events
					if (prevState != currState) {
						// get the sum of rates for all sequences away from prevSeq
						// (numCodonSites) * (numSenseCodons - 1) sequences differ by one nucleotide
						for (int i = 0; i < numCodonSites; i++) {
							for (int j = 0; j < numSenseCodons; j++) {
								if (prevSeq[i] != j) rateAwaySum += q[prevSeq[i]][j];
							}
						}
						rateAwaySum *= unitBrlen;

						stepProb = q[prevState][currState] * unitBrlen;
						lnStepProb = log(stepProb);

						x = -rateAwaySum * (unitCurrTime - unitPrevTime);
						//x = -rateAwaySum * unitBrlen * (unitCurrTime - unitPrevTime);
						//stepProb *= exp(x);
						lnStepProb += x;
						lnStepProbSum += lnStepProb;

						std::cout << prevState << "->" << currState << ":s" << (*it).getSite();
						std::cout << ", lnstepProb: "			<< lnStepProb;
						std::cout << ", R_ij: "				<< q[prevState][currState] * unitBrlen;
						std::cout << ", rateAwaySum: "		<< rateAwaySum;
						std::cout << ", dt: "				<< unitCurrTime - unitPrevTime;
						std::cout << ", -R_i* * dt: "		<< -rateAwaySum * unitBrlen * (unitCurrTime - unitPrevTime);
						std::cout << ", e^(-R_i* * dt): "	<<  exp(-rateAwaySum * unitBrlen * (unitCurrTime - unitPrevTime));
						std::cout << "\n";



						std::cout << "lnStepProbSum: " << lnStepProbSum << "\n";
						std::cout << "\n";


						prevSeq[(*it).getSite()] = currState;
						unitCurrTime = unitPrevTime;
					}
				}

				else if (unitPrevTime == unitCurrTime && unitCurrTime != 1.0)
					std::cout << "ERROR: duplicate event times, prevTime: " << unitPrevTime << ", currTime: " << unitCurrTime << "\n";

			}

			//std::cout << "lnStepProbSum: " << lnStepProbSum << "\n";
			// calculate final term
			rateAwaySum = 0.0;
			for (int i = 0; i < numCodonSites; i++) {
				for (int j = 0; j < numSenseCodons; j++) {
					if (prevSeq[i] != j) rateAwaySum += q[prevSeq[i]][j];
				}
			}
			x = -rateAwaySum * unitBrlen * (1.0 - unitFinalTime);
			lnStepProbSum += x;
			//std::cout << "lnStepProbSum: " << lnStepProbSum << "\n";

		}
	}

	return lnStepProbSum;
}


double ModelSeq::lnRootLikelihood()

{
	// 	pr(i|theta) 		= e^(-2*s*E_s(i)-2*p*E_p(i) * [*=1:N(pi_i__m)] /
	//	   			          [+=1:k(e^(-2*s*E_s(k)-2*p*E_p(k) * [*=1:N(pi_k__n)]]
	//
	//  using Gibbs sampler for M sampled sequences, find pr(i/theta)
	//  find the stationary probability of root

	// TODO: use the hyper-cloud method if this is too slow

	//double s = 0.0, p = 0.0;
	//double E_s = 0.0, E_p = 0.0;
	int changeSite = 0;
	int oldState = 0;
	double stationaryFreqSum = 0.0;
	double stationaryFreqSample = 0.0;
	double lnStationarySeqProb = 0.0;
	std::vector<double> f = getActiveFreqs()->getFreqs();
	std::vector<int> sampleSeq(numCodonSites);

	// get a pointer to the current tree topology
	Topology* t = getActiveTopology();

	//	load to root sequence into sampleSeq
	Node* p = t->getRoot();
	Step tempStep;
	std::vector<Step> sampleStepVector;
	std::list<Step> tempPath = p->getPath()->getEventHistory();

	for (std::list<Step>::iterator pathIt = tempPath.begin(); pathIt != tempPath.end(); pathIt++)
	{
		sampleSeq[(*pathIt).getSite()] = (*pathIt).getState();
	}

	//	sample M sequences for Gibbs sampler
	for (int i = 0; i < numSampleSeqs; i++)
	{
		// initialize
		stationaryFreqSum = 0.0;
		stationaryFreqSample = 0.0;

		// select a residue to change for sampleSeq
		changeSite = ((double)rand() / (double)RAND_MAX) * (double)numCodonSites;
		oldState = sampleSeq[changeSite];

		// assign a new state to sampleSeq
		for (int j = 0; j < numSenseCodons; j++)
		{
			if (qTemplate[sampleSeq[changeSite]][j] != ZERO_ENTRY && changeSite != j)
			{
				stationaryFreqSum += f[j];
			}
		}

		double sampleRV = ((double)rand() / (double)RAND_MAX) * (double)stationaryFreqSum;

		for (int j = 0; j < numSenseCodons; j++)
		{
			if (qTemplate[sampleSeq[changeSite]][j] != ZERO_ENTRY && changeSite != j)
			{
				stationaryFreqSample += f[j];
				if (stationaryFreqSample > sampleRV)
				{
					tempStep = Step(0.0, j, changeSite);
					//sampleSeq[changeSite] = j;
					break;
				}
			}
		}

		// TODO: this can be done with less memory just using Step masks
		// add sampleSeq to sampleSeqVector
		sampleStepVector.push_back(tempStep);
		//sampleSeqVector.push_back(sampleSeq);
		//sampleSeq[changeSite] = oldState;
	}


	// calculate root stationary probability from sampled sequences

	//	pr(s^(root)|theta') / pr(s^root)|theta) ~=
	//			e^(-2(p'-p)*E(s^(root)))
	//			* (*=[m=1,N]:(pi'_i__m / pi_i__m))
	//			* (+=[h=1,N]:(e^(-2(p -p*)*E(nu^(h))) * (*=[n=1,N]:(pi _(nu^(h)_n) / pi*_(nu^(h)_n))
	//			/ (+=[h=1,N]:(e^(-2(p'-p*)*E(nu^(h))) * (*=[n=1,N]:(pi'_(nu^(h)_n) / pi*_(nu^(h)_n))

	for (int i = 0; i < numCodonSites; i++) {
		lnStationarySeqProb += log(f[sampleSeq[i]]);
	}

	return lnStationarySeqProb;
}

void ModelSeq::setParametersGibbs() {

	/*
	for (std::vector<Parm*>::iterator p=parameters.begin(); p != parameters.end(); p++)
	{
		CodonFrequencies* derivedPtr = dynamic_cast<CodonFrequencies*> (*p);
		if (derivedPtr != 0)
		{
			derivedPtr->getInactiveState();

			//return derivedPtr->getActiveFreqs();
			break;
		}
	}
	*/

}


Freqs* ModelSeq::getActiveFreqs(void) {

	for (std::vector<Parm*>::iterator p=parameters.begin(); p != parameters.end(); p++)
	{
		CodonFrequencies* derivedPtr = dynamic_cast<CodonFrequencies*> (*p);
		if (derivedPtr != 0)
		{
			return derivedPtr->getActiveFreqs();
			break;
		}
	}
	return NULL;
}

/*
Contexts* ModelSeq::getActiveContexts(void) {

	for (std::vector<Parm*>::iterator p=parameters.begin(); p != parameters.end(); p++)
		{
		ContextDependence* derivedPtr = dynamic_cast<ContextDependence*> (*p);
		if (derivedPtr != 0)
			{
			return derivedPtr->getActiveContexts();
			break;
			}
		}
	return NULL;
}
*/


Dnds* ModelSeq::getActiveDnds(void) {

	for (std::vector<Parm*>::iterator p=parameters.begin(); p != parameters.end(); p++)
	{
		Omega* derivedPtr = dynamic_cast<Omega*> (*p);
		if (derivedPtr != 0)
		{
			return derivedPtr->getActiveDnds();
			break;
		}
	}
	return NULL;
}

TiTv* ModelSeq::getActiveTiTv(void) {

	for (std::vector<Parm*>::iterator p=parameters.begin(); p != parameters.end(); p++)
	{
		Kappa* derivedPtr = dynamic_cast<Kappa*> (*p);
		if (derivedPtr != 0)
		{
			return derivedPtr->getActiveTiTv();
			break;
		}
	}
	return NULL;
}

Topology* ModelSeq::getActiveTopology(void) {

	for (std::vector<Parm*>::iterator p=parameters.begin(); p != parameters.end(); p++)
	{
		Tree* derivedPtr = dynamic_cast<Tree*> (*p);
		if (derivedPtr != 0)
		{
			return derivedPtr->getActiveTopology();
			break;
		}
	}
	return NULL;
}

Tree* ModelSeq::getActiveTree(void) {

	for (std::vector<Parm*>::iterator p=parameters.begin(); p != parameters.end(); p++)
	{
		Tree* derivedPtr = dynamic_cast<Tree*> (*p);
		if (derivedPtr != 0)
		{
			return derivedPtr;
			break;
		}
	}
	return NULL;
}

Pairwise* ModelSeq::getActivePairwise(void) {
	for (std::vector<Parm*>::iterator p=parameters.begin(); p != parameters.end(); p++)
	{
		SeqStructP* derivedPtr = dynamic_cast<SeqStructP*> (*p);
		if (derivedPtr != 0)
		{
			return derivedPtr->getActivePairwise();
			break;
		}
	}
	return NULL;
}

SolvAcc* ModelSeq::getActiveSolvAcc(void) {


	for (std::vector<Parm*>::iterator p=parameters.begin(); p != parameters.end(); p++)
	{
		SeqStructS* derivedPtr = dynamic_cast<SeqStructS*> (*p);
		if (derivedPtr != 0)
		{
			return derivedPtr->getActiveSolvAcc();
			break;
		}
	}
	return NULL;
}

SubstRate* ModelSeq::getActiveSubstRate(void) {

	for (std::vector<Parm*>::iterator p=parameters.begin(); p != parameters.end(); p++)
	{
		ScalerU* derivedPtr = dynamic_cast<ScalerU*> (*p);
		if (derivedPtr != 0)
		{
			return derivedPtr->getActiveSubstRate();
			break;
		}
	}
	return NULL;
}


Parm* ModelSeq::pickParmAtRandom(void) {

	double u = ranPtr->uniformRv();
	double sum = 0.0;
	for (int i=0; i < (int)proposalProbs.size(); i++) {
		sum += proposalProbs[i];
		if (u < sum)
			return parameters[i];
	}
	return NULL;
}

void ModelSeq::updateAllFlags(void) {

	Topology* t = getActiveTopology();
	t->updateAllCls(true);
	t->updateAllTis(true);
	t->flipAllActiveCls();
	t->flipAllActiveTis();
	////tiProbs->setTransitionProbs();
	t->updateAllTis(true);
}

void ModelSeq::updateQ(Parm* p) {

	bool shouldUpdate = false;
	{
		CodonFrequencies* derivedPtr = dynamic_cast<CodonFrequencies*> (p);
		if (derivedPtr != 0)
		{
			shouldUpdate = true;
			goto funcEnd;
		}
	}

	{
		Kappa* derivedPtr = dynamic_cast<Kappa*> (p);
		if (derivedPtr != 0)
		{
			shouldUpdate = true;
			goto funcEnd;
		}
	}

	{
		Omega* derivedPtr = dynamic_cast<Omega*> (p);
		if (derivedPtr != 0)
		{
			shouldUpdate = true;
			goto funcEnd;
		}
	}

	{
		SeqStructS* derivedPtr = dynamic_cast<SeqStructS*> (p);
		if (derivedPtr != 0)
		{
			shouldUpdate = true;
			goto funcEnd;
		}
	}

	{
		SeqStructP* derivedPtr = dynamic_cast<SeqStructP*> (p);
		if (derivedPtr != 0)
		{
			shouldUpdate = true;
			goto funcEnd;
		}
	}

	{
		ScalerU* derivedPtr = dynamic_cast<ScalerU*> (p);
		if (derivedPtr != 0)
		{
			shouldUpdate = true;
			goto funcEnd;
		}
	}

	funcEnd:
		if (shouldUpdate == true)
		{
			fillInRateMatrix();
			////tiMatrix->updateQ(q);
		}
}

void ModelSeq::restoreQ(Parm* p) {

	bool shouldUpdate = false;
	{
		CodonFrequencies* derivedPtr = dynamic_cast<CodonFrequencies*> (p);
		if (derivedPtr != 0)
			{
			shouldUpdate = true;
			goto funcEnd;
			}
	}

	{
		Kappa* derivedPtr = dynamic_cast<Kappa*> (p);
		if (derivedPtr != 0)
			{
			shouldUpdate = true;
			goto funcEnd;
		}
	}

	{
		Omega* derivedPtr = dynamic_cast<Omega*> (p);
		if (derivedPtr != 0)
			{
			shouldUpdate = true;
			goto funcEnd;
		}
	}

	{
		SeqStructS* derivedPtr = dynamic_cast<SeqStructS*> (p);

		if (derivedPtr != 0)
		{
			shouldUpdate = true;
			goto funcEnd;
		}
	}

	{
		SeqStructP* derivedPtr = dynamic_cast<SeqStructP*> (p);
		if (derivedPtr != 0)
		{
			shouldUpdate = true;
			goto funcEnd;
		}
	}

	{
		ScalerU* derivedPtr = dynamic_cast<ScalerU*> (p);
		if (derivedPtr != 0)
		{
			shouldUpdate = true;
			goto funcEnd;
		}
	}

	funcEnd:
		if (shouldUpdate == true)
		{
			////tiMatrix->restoreQ();
		}
}

void ModelSeq::keep(Parm* p) {

	p->keep();

	Tree* derivedPtr = dynamic_cast<Tree*> (p);
	if (derivedPtr == 0)
		{
		getActiveTree()->keep();
		}
}

void ModelSeq::restore(Parm* p) {

	p->restore();

	Tree* derivedPtr = dynamic_cast<Tree*> (p);
	if (derivedPtr == 0)
	{
		getActiveTree()->restore();
	}

}

void ModelSeq::printQ(void) {

	std::cout << "ModelSeq: Q MATRIX\n";
		for (int i=0; i<numStates; i++)
		{
			for (int j=0; j<numStates; j++)
			{
				if (i == j)
					std::cout << std::fixed << std::setprecision(8) << q[i][j] << " ";
				else
					std::cout << std::fixed << std::setprecision(8) << " " << q[i][j] << " ";

			}
			std::cout << "\n";
		}
	std::cout << "\n";
}
